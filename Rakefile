require 'rubygems'

task :default => :test
task :clean   => :clobber


## Documentation

# begin
#   require 'yard'
#   YARD::Rake::YardocTask.new
# rescue LoadError => e
#   $stderr.puts 'It seems as though you do not have yard installed.'
#   command = ENV['RUBY_VERSION'] ? 'rake' : 'sudo macrake'
#   $stderr.puts "You can install it by running `#{command} setup_dev`"
# end

# desc 'Generate Graphviz object graph'
# task :garden => :yard do
#   sh 'yard graph --full --dependencies --dot="-Tpng:quartz" -f docs/images/AX.dot'
# end

def rvm?
  ENV['RUBY_VERSION']
end

def macruby?
  defined? MACRUBY_REVISION
end

def cruby?
  RUBY_ENGINE == 'ruby'
end


## Console

desc 'Start up irb with AXElements loaded'
task :console => :ext do
  irb = rvm? ? 'irb' : 'macirb'
  sh "#{irb} -Ilib -rubygems -rax_elements"
end


## Compilation

if macruby?
  require 'rake/compiletask'
  Rake::CompileTask.new
end

desc 'Compile C extensions'
task :ext do
  def needs_regeneration? source, bundle
    return true unless File.exists? bundle
    return true unless File.mtime(bundle) > File.mtime(source)
    return true if macruby? && ext_platform(bundle) == :cruby
    return true if cruby?   && ext_platform(bundle) == :macruby
  end

  def ext_platform bundle
    return :macruby if `otool -L #{bundle}`.match /MacRuby/
    return :cruby
  end

  ext  = 'key_coder'
  dir  = 'ext/accessibility/key_coder'
  path = "#{dir}/#{ext}"
  if needs_regeneration? "#{path}.m", "#{path}.bundle"
    Rake::Task[:clobber_ext].execute
    Dir.chdir(dir) do
      ruby 'extconf.rb'
      sh   'make'
    end
    cp "#{path}.bundle", 'lib/accessibility'
  end
end

desc 'Remove files generated by compiling the C extension'
task :clobber_ext do
  Dir.glob('{lib,ext}/**/*{.bundle,.o}').each do |file|
    $stdout.puts "rm #{file}"
    rm_f file
  end
  Dir.glob('ext/**/Makefile').each do |file|
    $stdout.puts "rm #{file}"
    rm_f file
  end
end
task :clobber => :clobber_ext


## Testing

desc 'Open the fixture app'
task :run_fixture => :fixture do
  sh 'open test/fixture/Release/AXElementsTester.app'
end

desc 'Build the test fixture'
task :fixture do
  sh 'cd test/AXElementsTester && xcodebuild'
end

desc 'Remove the built fixture app'
task :clobber_fixture do
  $stdout.puts 'rm -rf test/fixture'
  rm_rf 'test/fixture'
end
task :clobber => :clobber_fixture

require 'rake/testtask'
namespace :test do
  [:unit, :integration].each do |group|
    Rake::TestTask.new(group) do |t|
      t.libs     << 'test'
      t.pattern   = "test/#{group}/**/test_*.rb"
      t.ruby_opts = ['-rhelper']
      t.verbose   = true
    end
    task group => [:ext, :fixture]
  end

  desc 'Run tests for the string parser'
  Rake::TestTask.new(:string) do |t|
    t.libs << 'test'
    t.pattern = "test/unit/**/test_string.rb"
    t.ruby_opts = ['-rtest_runner']
    t.verbose = true
  end
  task :string => :ext

  desc 'Run tests under CRuby (where applicable)'
  task :cruby do
    if rvm?
      puts sh 'rvm 1.9.3 do test:string'
    else
      sh 'rake test:string'
    end
  end
end

desc 'Run all tests'
task :test => ['test:unit', 'test:integration', 'test:cruby']


## Gem Packaging

require 'rubygems/package_task'
spec = Gem::Specification.load('AXElements.gemspec')
Gem::PackageTask.new(spec) { }

desc 'Build and install gem (not including deps)'
task :install => :gem do
  require 'rubygems/installer'
  Gem::Installer.new("pkg/#{spec.file_name}").install
end


## Setup

desc 'Install dependencies for development'
task :setup_dev do
  require 'rubygems/dependency_installer'
  spec.development_dependencies.each do |dep|
    puts "Installing #{dep.name} (#{dep.requirement})"
    Gem::DependencyInstaller.new.install(dep.name, dep.requirement)
  end
end
